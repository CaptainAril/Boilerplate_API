openapi: 3.0.1
info:
  title: HNG Boilerplate API
  description: API for HNG Boilerplate project
  version: 1.0.0
servers:
  - url: https://api.hngboilerplate.com


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        social_auth_data:
          type: object
        email_verified:
          type: boolean
        email_verification_token:
          type: string
        email_verification_expires_at:
          type: string
          format: date-time
        is_active:
          type: boolean
        date_created:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
        is_deleted:
          type: boolean
    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Subscription:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        product_id:
          type: integer
        status:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    Payment:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        payment_method:
          type: string
        payment_data:
          type: object
        created_at:
          type: string
          format: date-time
    Invoice:
      type: object
      properties:
        id:
          type: integer
        subscription_id:
          type: integer
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
    BlogPost:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        author_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        id:
          type: integer
        post_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
    Notification:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
paths:
  /auth/signup:
    post:
      tags: 
        - Authentication
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/login:
    post:
      tags: 
        - Authentication
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /auth/logout:
    post:
      tags: 
        - Authentication
      summary: Log out a user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
  /auth/forgot-password:
    post:
      tags: 
        - Authentication
      summary: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset initiated
  /auth/reset-password:
    post:
      tags: 
        - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Password reset successful
  /auth/verify-email:
    post:
      tags: 
        - Authentication
      summary: Verify email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully
  /users:
    get:
      tags: 
        - User
      summary: Get current user information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: 
        - User
      summary: Update current user information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User information updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      tags: 
        - User
      summary: Get user information (for admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags: 
        - User
      summary: Update user information (for admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User information updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags: 
        - User
      summary: Delete user (for admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
  /organizations:
    post:
      tags: 
        - Organizations
      summary: Create an organization
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    get:
      tags: 
        - Organizations
      summary: Get all organizations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Organizations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
  /organizations/{id}:
    get:
      tags: 
        - Organizations
      summary: Get organization details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Organization details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      tags: 
        - Organizations
      summary: Update organization details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Organization details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags: 
        - Organizations
      summary: Delete organization
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Organization deleted successfully
  /products:
    post:
      tags: 
        - Products
      summary: Create a new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    get:
      tags: 
        - Products
      summary: Get all products
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{id}:
    get:
      tags: 
        - Products
      summary: Get product details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      tags: 
        - Products
      summary: Update product details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
      responses:
        '200':
          description: Product details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags: 
        - Products
      summary: Delete product
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Product deleted successfully
  /subscriptions:
    post:
      tags: 
        - Subcriptions
      summary: Create a new subscription
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                product_id:
                  type: integer
                status:
                  type: string
                start_date:
                  type: string
                  format: date-time
                end_date:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
    get:
      tags: 
        - Subcriptions
      summary: Get all subscriptions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Subscriptions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
  /subscriptions/{id}:
    get:
      tags: 
        - Subcriptions
      summary: Get subscription details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subscription details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
    put:
      tags: 
        - Subcriptions
      summary: Update subscription details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                end_date:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Subscription details updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
    delete:
      tags: 
        - Subcriptions
      summary: Delete subscription
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Subscription deleted successfully
  /payments:
    post:
      tags: 
        - Payments
      summary: Create a payment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                amount:
                  type: number
                currency:
                  type: string
                status:
                  type: string
                payment_method:
                  type: string
                payment_data:
                  type: object
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
    get:
      tags: 
        - Payments
      summary: Get all payments
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
  /payments/{id}:
    get:
      tags: 
        - Payments
      summary: Get payment details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Payment details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
    put:
      tags: 
        - Payments
      summary: Update payment status
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '200':
          description: Payment status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
  /invoices:
    get:
      tags: 
        - Invoices
      summary: Get all invoices
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Invoices retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
  /invoices/{id}:
    get:
      tags: 
        - Invoices
      summary: Get invoice details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Invoice details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
  /blog-posts:
    post:
      tags: 
        - Blog Posts
      summary: Create a new blog post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                author_id:
                  type: integer
      responses:
        '201':
          description: Blog post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
    get:
      tags: 
        - Blog Posts
      summary: Get all blog posts
      responses:
        '200':
          description: Blog posts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
  /blog-posts/{id}:
    get:
      tags: 
        - Blog Posts
      summary: Get blog post details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Blog post details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
    put:
      tags: 
        - Blog Posts
      summary: Update blog post
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      responses:
        '200':
          description: Blog post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
    delete:
      tags: 
        - Blog Posts
      summary: Delete blog post
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Blog post deleted successfully
  /comments:
    post:
      tags: 
        - Coments
      summary: Add a comment to a blog post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                post_id:
                  type: integer
                user_id:
                  type: integer
                content:
                  type: string
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  /comments/{id}:
    get:
      tags: 
        - Coments
      summary: Get comment details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      tags: 
        - Coments
      summary: Update comment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags: 
        - Coments
      summary: Delete comment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment deleted successfully
  /notifications:
    get:
      tags: 
        - Notifications
      summary: Get all notifications
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
  /notifications/{id}:
    put:
      tags: 
        - Notifications
      summary: Mark notification as read
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Notification marked as read
  /notifications/{userId}/mark-all-read:
    post:
      tags: 
        - Notifications
      summary: Mark all notifications as read for a user
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: All notifications marked as read
